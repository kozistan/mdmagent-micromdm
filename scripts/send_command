#!/bin/bash

# MDM Agent Command Sender
# Sends commands to devices via HTTP endpoint with SSH remote write
# Version: 2.0

set -e

# Configuration - Update these for your environment
REPO_SERVER="repo.example.com"
REPO_USER="repouser"
REPO_PASS="your-password"
REMOTE_HOST="hdadmin@repo.example.com"
COMMANDS_DIR="/Users/Shared/munki_repo/commands"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Usage information
show_usage() {
    cat << EOF
Usage: $0 <device_udid> <command_type> <value> [parameter]

Command Types:
  test      - Send test command with message
  hostname  - Change device hostname
  shell     - Execute shell command

Examples:
  $0 58687F4F-898F-5153-9F83-88296A8111B0 test "Hello World"
  $0 58687F4F-898F-5153-9F83-88296A8111B0 hostname "new-mac-name"
  $0 58687F4F-898F-5153-9F83-88296A8111B0 shell "brew install git"
  $0 58687F4F-898F-5153-9F83-88296A8111B0 shell "dscl . -list /Users"

Environment Variables:
  REPO_SERVER    - Repository server hostname
  REPO_USER      - Repository authentication username
  REPO_PASS      - Repository authentication password
  REMOTE_HOST    - SSH connection string (user@host)
  COMMANDS_DIR   - Remote commands directory path

Configuration:
  Edit this script or set environment variables to match your setup.

EOF
}

# Logging functions
log_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

log_step() {
    echo -e "${CYAN}üì°${NC} $1"
}

# Validate arguments
if [ $# -lt 3 ]; then
    echo -e "${RED}Error: Insufficient arguments${NC}"
    echo
    show_usage
    exit 1
fi

DEVICE_UDID="$1"
COMMAND_TYPE="$2"
COMMAND_VALUE="$3"
COMMAND_PARAMETER="${4:-}"

# Validate UDID format (basic check)
if [[ ! "$DEVICE_UDID" =~ ^[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}$ ]]; then
    log_error "Invalid UDID format: $DEVICE_UDID"
    echo "Expected format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
    exit 1
fi

# Validate command type
case "$COMMAND_TYPE" in
    "test"|"hostname"|"shell")
        ;;
    *)
        log_error "Invalid command type: $COMMAND_TYPE"
        echo "Valid types: test, hostname, shell"
        exit 1
        ;;
esac

# Check prerequisites
check_prerequisites() {
    # Check for required commands
    for cmd in ssh scp curl jq; do
        if ! command -v "$cmd" &> /dev/null; then
            log_error "Required command not found: $cmd"
            exit 1
        fi
    done
    
    # Test SSH connectivity
    if ! ssh -o ConnectTimeout=5 -o BatchMode=yes "$REMOTE_HOST" "test -d $COMMANDS_DIR" 2>/dev/null; then
        log_error "Cannot connect to remote host or commands directory not found"
        echo "Host: $REMOTE_HOST"
        echo "Directory: $COMMANDS_DIR"
        exit 1
    fi
}

# Check and clean processed commands
check_processed_commands() {
    local device_udid="$1"
    local processed_file="$COMMANDS_DIR/$device_udid.json.processed"
    
    # Check if commands were processed
    if ssh "$REMOTE_HOST" "test -f $processed_file" 2>/dev/null; then
        log_step "Cleaning processed commands..."
        # Remove old command and processed marker
        ssh "$REMOTE_HOST" "rm -f $COMMANDS_DIR/$device_udid.json $processed_file" 2>/dev/null || true
    fi
}

# Main execution
main() {
    echo -e "${BLUE}üì§ Sending $COMMAND_TYPE command to device $DEVICE_UDID...${NC}"
    
    # Check prerequisites
    check_prerequisites
    
    # Clean processed commands first
    check_processed_commands "$DEVICE_UDID"
    
    # Create local temp file
    LOCAL_TEMP_FILE="/tmp/mdm_command_$DEVICE_UDID.json"
    REMOTE_COMMAND_FILE="$COMMANDS_DIR/$DEVICE_UDID.json"
    REMOTE_TEMP_FILE="/tmp/mdm_command_$DEVICE_UDID.json"
    
    # Check for existing commands and merge if necessary
    if ssh "$REMOTE_HOST" "test -f $REMOTE_COMMAND_FILE" 2>/dev/null; then
        log_warning "Device has pending commands. Merging new command..."
        
        # Download existing commands via /tmp
        ssh "$REMOTE_HOST" "cp $REMOTE_COMMAND_FILE /tmp/existing_$DEVICE_UDID.json && chown $(whoami) /tmp/existing_$DEVICE_UDID.json" 2>/dev/null || true
        scp "$REMOTE_HOST:/tmp/existing_$DEVICE_UDID.json" "/tmp/existing_$DEVICE_UDID.json" 2>/dev/null || true
        ssh "$REMOTE_HOST" "rm -f /tmp/existing_$DEVICE_UDID.json" 2>/dev/null || true
        
        if [ -f "/tmp/existing_$DEVICE_UDID.json" ]; then
            # Merge commands using Python
            python3 << PYTHON_SCRIPT
import json
import sys
from datetime import datetime

try:
    # Load existing commands
    with open('/tmp/existing_$DEVICE_UDID.json', 'r') as f:
        existing = json.load(f)
    
    # Create new command
    new_cmd = {
        "timestamp": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
        "commands": [
            {
                "type": "$COMMAND_TYPE",
                "value": "$COMMAND_VALUE"
            }
        ]
    }
    
    # Add parameter if provided
    if "$COMMAND_PARAMETER":
        new_cmd["commands"][0]["parameter"] = "$COMMAND_PARAMETER"
    
    # Merge commands (replace existing with new - no accumulation)
    existing['commands'] = new_cmd['commands']
    existing['timestamp'] = new_cmd['timestamp']
    
    # Write merged result
    with open('$LOCAL_TEMP_FILE', 'w') as f:
        json.dump(existing, f, indent=2)
        
    print("Commands merged successfully")
    
except Exception as e:
    print(f"Error merging commands: {e}", file=sys.stderr)
    sys.exit(1)
PYTHON_SCRIPT
            
            # Clean up temp file
            rm -f "/tmp/existing_$DEVICE_UDID.json"
        else
            log_warning "Could not download existing commands, creating new command file"
        fi
    fi
    
    # Create new command if no existing commands or merge failed
    if [ ! -f "$LOCAL_TEMP_FILE" ]; then
        log_success "Creating new command file for device..."
        
        # Create JSON command structure
        python3 << PYTHON_SCRIPT
import json
from datetime import datetime

command_data = {
    "timestamp": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
    "commands": [
        {
            "type": "$COMMAND_TYPE",
            "value": "$COMMAND_VALUE"
        }
    ]
}

# Add parameter if provided
if "$COMMAND_PARAMETER":
    command_data["commands"][0]["parameter"] = "$COMMAND_PARAMETER"

# Write to temp file
with open('$LOCAL_TEMP_FILE', 'w') as f:
    json.dump(command_data, f, indent=2)

print("Command file created")
PYTHON_SCRIPT
    fi
    
    # Upload to remote server via SSH (upload to /tmp first)
    log_step "Uploading command to $REPO_SERVER..."
    
    # Upload to /tmp (user has permissions)
    scp "$LOCAL_TEMP_FILE" "$REMOTE_HOST:$REMOTE_TEMP_FILE"
    
    # Move to final location and set permissions (no sudo needed after permissions fix)
    ssh "$REMOTE_HOST" "mv $REMOTE_TEMP_FILE $REMOTE_COMMAND_FILE && chmod 664 $REMOTE_COMMAND_FILE"
    
    # Clean local temp file
    rm -f "$LOCAL_TEMP_FILE"
    
    log_success "Command queued successfully!"
    
    # Display command details
    echo
    echo -e "${CYAN}üìã Command details:${NC}"
    echo "   Device: $DEVICE_UDID"
    echo "   Type: $COMMAND_TYPE"
    echo "   Value: $COMMAND_VALUE"
    if [ -n "$COMMAND_PARAMETER" ]; then
        echo "   Parameter: $COMMAND_PARAMETER"
    fi
    
    # Show file locations
    echo
    echo -e "${CYAN}üìÅ Remote command file:${NC} $REMOTE_COMMAND_FILE"
    echo -e "${CYAN}üåê HTTP endpoint:${NC} https://$REPO_SERVER/commands/$DEVICE_UDID.json"
    
    echo
    echo -e "${CYAN}üí° Agent will poll for commands every 5 seconds${NC}"
    echo -e "${CYAN}üìä Monitor execution:${NC} tail -f /var/log/mdmagent.log (on device)"
    
    # Validate JSON syntax
    log_step "Validating JSON syntax..."
    if ssh "$REMOTE_HOST" "python3 -m json.tool $REMOTE_COMMAND_FILE" >/dev/null 2>&1; then
        log_success "JSON syntax is valid"
    else
        log_error "JSON syntax error in command file"
        exit 1
    fi
    
    echo
    log_success "Command delivery completed!"
    
    # Show helpful commands
    echo
    echo -e "${CYAN}üìù To check pending commands:${NC}"
    echo "   curl -s -u '$REPO_USER:$REPO_PASS' https://$REPO_SERVER/commands/$DEVICE_UDID.json | jq ."
    echo
    echo -e "${CYAN}üóëÔ∏è  To clear pending commands:${NC}"
    echo "   ssh $REMOTE_HOST 'rm -f $REMOTE_COMMAND_FILE'"
    echo
}

# Handle help requests
case "${1:-}" in
    --help|-h|help)
        show_usage
        exit 0
        ;;
esac

# Run main function
main "$@"
